@model IEnumerable<dynamic>
@{
    Layout = null;
    string Titulo = ViewBag.TituloReporte;
    string Fecha = ViewBag.FechaGeneracion;
    int TotalPostulantes = ViewBag.TotalPostulantes;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@Titulo</title>
    <style>
        /* Asegúrate de incluir Font Awesome si no lo has hecho */
        @@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css');

        :root {
            --color-primario: #3498db;
            --color-secundario: #2c3e50;
            --color-exito: #2ecc71;
            --color-advertencia: #f39c12;
            --color-peligro: #e74c3c;
            --color-texto: #333;
            --color-fondo: #f9f9f9;
            --color-borde: #e0e0e0;
        }

        * {
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', system-ui, sans-serif;
            color: var(--color-texto);
            background-color: var(--color-fondo);
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }

        .reporte {
            max-width: 1200px;
            margin: auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .reporte-header {
            background: linear-gradient(135deg, var(--color-secundario), var(--color-primario));
            color: white;
            padding: 30px;
            text-align: center;
        }

        .reporte-title {
            font-size: 2rem;
            margin: 0;
            font-weight: 600;
        }

        .reporte-subtitle {
            margin-top: 10px;
            font-weight: 300;
            font-size: 0.95rem;
            opacity: 0.9;
        }

        .reporte-body {
            padding: 30px;
        }

        .tabla-reporte {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            font-size: 0.95rem;
        }

        .tabla-reporte th,
        .tabla-reporte td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid var(--color-borde);
        }

        .tabla-reporte th {
            background-color: var(--color-primario);
            color: white;
            font-weight: 500;
            position: sticky;
            top: 0;
        }

        .tabla-reporte tr:nth-child(even) {
            background-color: rgba(0,0,0,0.02);
        }

        .tabla-reporte tr:hover {
            background-color: rgba(0,0,0,0.05);
        }

        .badge-tipo {
            display: inline-block;
            padding: 4px 10px;
            font-size: 0.8rem;
            font-weight: 600;
            border-radius: 12px;
            color: white;
            text-transform: capitalize;
        }

        .badge-licenciatura {
            background: linear-gradient(135deg, #3498db, #2980b9);
        }

        .badge-maestria {
            background: linear-gradient(135deg, #9b59b6, #8e44ad);
        }

        .badge-doctorado {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }

        .badge-formacion {
            background: linear-gradient(135deg, #2ecc71, #27ae60);
        }

        .progress-container {
            width: 100%;
            position: relative;
        }

        .progress {
            width: 100%;
            height: 20px;
            background-color: #f5f5f5;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
        }

        .progress-bar {
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding-right: 8px;
            font-size: 0.7rem;
            font-weight: 600;
            color: white;
            background: linear-gradient(90deg, #f39c12, #e67e22);
        }

        .resumen {
            margin-top: 30px;
            padding: 20px;
            background-color: rgba(52, 152, 219, 0.05);
            border-radius: 8px;
            border-left: 4px solid var(--color-primario);
        }

        .resumen h3 {
            margin-bottom: 15px;
            color: var(--color-secundario);
            font-size: 1.2rem;
        }

        .resumen ul {
            columns: 2;
            column-gap: 30px;
        }

        .print-controls {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 100;
        }

        .print-btn {
            background: var(--color-secundario);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .print-btn:hover {
            background: var(--color-primario);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        @@media print {
            .print-controls {
                display: none;
            }

            body {
                background: white;
                padding: 0;
            }

            .reporte {
                box-shadow: none;
                border-radius: 0;
            }

            .tabla-reporte th {
                background-color: #3498db !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }

            .resumen ul {
                columns: 2;
            }
        }

        /* Botón Atrás */
        .back-button {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: var(--color-secundario);
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            z-index: 100;
        }

        .back-button:hover {
            background: var(--color-primario);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
    </style>
</head>
<body>
    <main class="reporte">
        <header class="reporte-header">
            <h1 class="reporte-title">@Titulo</h1>
            <p class="reporte-subtitle">Generado el: @Fecha | Total postulantes: @TotalPostulantes</p>
        </header>

        <section class="reporte-body">
            <table class="tabla-reporte">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>ID Título</th>
                        <th>Especialidad</th>
                        <th>Título</th>
                        <th>Tipo</th>
                        <th>Postulantes</th>
                        <th>Distribución</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int contador = 1;
                        foreach (var item in Model)
                        {
                            decimal porcentaje = TotalPostulantes > 0 
                                ? Math.Round((decimal)item.CantidadPostulantes / TotalPostulantes * 100, 2) 
                                : 0;

                            string badgeClass = "badge-tipo ";
                            switch(item.TipoTitulo)
                            {
                                case "Licenciatura":
                                    badgeClass += "badge-licenciatura";
                                    break;
                                case "Maestría":
                                    badgeClass += "badge-maestria";
                                    break;
                                case "Doctorado":
                                    badgeClass += "badge-doctorado";
                                    break;
                                default:
                                    badgeClass += "badge-formacion";
                                    break;
                            }

                            <tr>
                                <td>@contador</td>
                                <td>@item.TituloId</td>
                                <td>@item.Especialidad</td>
                                <td>@item.NombreTitulo</td>
                                <td>
                                    <span class="@badgeClass">@item.TipoTitulo</span>
                                </td>
                                <td>@item.CantidadPostulantes</td>
                                <td>
                                    <div class="progress-container">
                                        <div class="progress">
                                            <div class="progress-bar" style="width:@porcentaje%">
                                                @porcentaje%
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            contador++;
                        }
                    }
                </tbody>
            </table>

            <div class="resumen">
                <h3>Resumen Estadístico</h3>
                <p>Total de títulos académicos registrados: @Model.Count()</p>
                
                @if (Model.Any())
                {
                    var tituloMasComun = Model.OrderByDescending(x => x.CantidadPostulantes).FirstOrDefault();
                    var porcentajeTop = TotalPostulantes > 0 ? 
                        Math.Round((decimal)tituloMasComun.CantidadPostulantes / TotalPostulantes * 100, 1) : 0;
                    
                    <p>
                        Título más común: <strong>@tituloMasComun.NombreTitulo</strong> 
                        (@tituloMasComun.TipoTitulo) con @tituloMasComun.CantidadPostulantes postulantes (@porcentajeTop%)
                    </p>
                    
                    var tiposTitulo = Model.GroupBy(t => t.TipoTitulo)
                                         .Select(g => new {
                                             Tipo = g.Key,
                                             Cantidad = g.Sum(x => x.CantidadPostulantes),
                                             Porcentaje = (decimal)g.Sum(x => x.CantidadPostulantes) / TotalPostulantes * 100
                                         })
                                         .OrderByDescending(t => t.Cantidad);
                    
                    <p>Distribución por tipo de título:</p>
                    <ul>
                        @foreach (var tipo in tiposTitulo)
                        {
                            <li>@tipo.Tipo: @tipo.Cantidad postulantes (@Math.Round(tipo.Porcentaje, 1)%)</li>
                        }
                    </ul>
                }
            </div>
        </section>
    </main>

    <div class="print-controls">
        <button class="print-btn" onclick="window.print()">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M5 1a2 2 0 0 0-2 2v1h10V3a2 2 0 0 0-2-2H5zm6 8H5a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1z"/>
                <path d="M0 7a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2h-1v-2a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2H2a2 2 0 0 1-2-2V7zm2.5 1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1z"/>
            </svg>
            Imprimir Reporte
        </button>
    </div>

    <div class="back-button" onclick="window.history.back()">
        <i class="fas fa-arrow-left fa-lg"></i>
    </div>
</body>
</html>